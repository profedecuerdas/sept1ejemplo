Archivo: ./app/src/main/AndroidManifest.xml
-----------------------------------------------------
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <!-- Permisos requeridos -->
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.MANAGE_EXTERNAL_STORAGE" tools:ignore="ScopedStorage" />

    <application
        android:allowBackup="true"
        android:icon="@drawable/rod"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.Sept1ejemplo">

        <activity
            android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity android:name=".RegistroDocente" />
        <activity android:name=".FirmaActivity" />
        <activity android:name=".RegistrosActivity" />
        <activity android:name=".ActivityDos" />
        <activity android:name=".ActivityTres" />
    </application>
</manifest>

Archivo: ./build.gradle.kts
-----------------------------------------------------
buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath("com.android.tools.build:gradle:8.2.0-rc01")  // Usa la versión más reciente estable
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:1.8.20")  // Actualiza a la versión compatible con tu AGP  }
}

}
Archivo: ./app/build.gradle.kts
-----------------------------------------------------
plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
    id("kotlin-kapt")  // Si estás usando Kotlin Annotation Processing
}

android {
    namespace = "com.example.sept1ejemplo"
    compileSdk = 34

    defaultConfig {
        applicationId = "com.example.sept1ejemplo"
        minSdk = 26
        targetSdk = 34
        versionCode = 1
        versionName = "1.0.3"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
    }
    buildFeatures {
        viewBinding = true
    }
}

dependencies {
    val room_version = "2.5.2"

    implementation("com.github.gcacace:signature-pad:1.3.1")
    implementation("androidx.room:room-runtime:$room_version")
    implementation("androidx.room:room-ktx:$room_version")
    kapt("androidx.room:room-compiler:$room_version")
    implementation("com.itextpdf:itext7-core:7.2.3")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4")

    implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.6.2")
    implementation("androidx.core:core-ktx:1.12.0")
    implementation("androidx.appcompat:appcompat:1.6.1")
    implementation("com.google.android.material:material:1.9.0")
    implementation("androidx.constraintlayout:constraintlayout:2.1.4")
    testImplementation("junit:junit:4.13.2")
    androidTestImplementation("androidx.test.ext:junit:1.1.5")
    androidTestImplementation("androidx.test.espresso:espresso-core:3.5.1")

    // Agrega aquí otras dependencias que puedas necesitar
}

kotlin {
    jvmToolchain(17)
}

Archivo: ./app/src/main/java/com/example/sept1ejemplo/MainActivity.kt
-----------------------------------------------------
package com.example.sept1ejemplo

import android.content.Intent
import android.os.Bundle
import android.util.Log
import android.widget.ArrayAdapter
import android.widget.Button
import android.widget.EditText
import android.widget.Spinner
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.lifecycleScope
import com.example.sept1ejemplo.database.AppDatabase
import com.example.sept1ejemplo.database.AsignaturaEntity
import com.google.android.material.appbar.MaterialToolbar
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext

class MainActivity : AppCompatActivity() {
    private lateinit var database: AppDatabase
    private lateinit var editTextNombre: EditText
    private lateinit var editTextNota: EditText
    private lateinit var spinnerAsignaturas: Spinner
    private lateinit var asignaturas: List<AsignaturaEntity>
    private lateinit var textViewDocenteName: TextView

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        database = AppDatabase.getDatabase(this)

        Log.d("MainActivity", "onCreate: Actividad principal iniciada")
        val toolbar: MaterialToolbar = findViewById(R.id.toolbar)
        toolbar.title = getString(R.string.app_name)

        editTextNombre = findViewById(R.id.editTextNombre)
        editTextNota = findViewById(R.id.editTextNota)
        spinnerAsignaturas = findViewById(R.id.spinnerAsignaturas)
        textViewDocenteName = findViewById(R.id.textViewDocenteName)

        val btnLimpiar: Button = findViewById(R.id.btnLimpiar)
        val btnFirmar: Button = findViewById(R.id.btnFirmar)
        val btnIrActivityTres: Button = findViewById(R.id.btnIrActivityTres)

        lifecycleScope.launch {
            checkDocenteAndLoadAsignaturas()
        }

        btnLimpiar.setOnClickListener {
            Log.d("MainActivity", "btnLimpiar: Limpiando campos")
            editTextNombre.text.clear()
            editTextNota.text.clear()
            spinnerAsignaturas.setSelection(0)
        }

        btnFirmar.setOnClickListener {
            Log.d("MainActivity", "btnFirmar: Iniciando FirmaActivity")
            val intent = Intent(this, FirmaActivity::class.java)
            intent.putExtra("nombre", editTextNombre.text.toString())
            intent.putExtra("nota", editTextNota.text.toString())
            intent.putExtra("asignatura", spinnerAsignaturas.selectedItem.toString())
            startActivity(intent)
        }

        btnIrActivityTres.setOnClickListener {
            Log.d("MainActivity", "btnIrActivityTres: Iniciando ActivityTres")
            val intent = Intent(this, ActivityTres::class.java)
            startActivity(intent)
        }
    }

    private suspend fun checkDocenteAndLoadAsignaturas() {
        val docente = withContext(Dispatchers.IO) {
            database.registroDao().getDocente()
        }
        if (docente == null) {
            // Si no existe, redirigir a la actividad RegistroDocente
            val intent = Intent(this@MainActivity, RegistroDocente::class.java)
            startActivity(intent)
            finish()
        } else {
            // Si existe, mostrar el nombre del docente y cargar las asignaturas
            withContext(Dispatchers.Main) {
                textViewDocenteName.text = "Docente: ${docente.nombreCompleto}"
            }
            loadAsignaturas(docente.id)
        }
    }

    private suspend fun loadAsignaturas(docenteId: Int) {
        asignaturas = withContext(Dispatchers.IO) {
            database.registroDao().getAsignaturasForDocente(docenteId)
        }
        val asignaturasNombres = asignaturas.map { it.nombre }
        val adapter = ArrayAdapter(this, android.R.layout.simple_spinner_item, asignaturasNombres)
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
        withContext(Dispatchers.Main) {
            spinnerAsignaturas.adapter = adapter
        }
    }
}
Archivo: ./app/src/main/java/com/example/sept1ejemplo/ActivityDos.kt
-----------------------------------------------------
package com.example.sept1ejemplo

import android.content.Intent
import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.lifecycleScope
import com.example.sept1ejemplo.database.AppDatabase
import com.example.sept1ejemplo.databinding.ActivityDosBinding
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.text.SimpleDateFormat
import java.util.*

class ActivityDos : AppCompatActivity() {

    private lateinit var binding: ActivityDosBinding
    private lateinit var database: AppDatabase

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityDosBinding.inflate(layoutInflater)
        setContentView(binding.root)

        database = AppDatabase.getDatabase(this)

        // Obtener los datos del Intent
        val nombresApellidos = intent.getStringExtra("NOMBRES_APELLIDOS") ?: ""
        val nota = intent.getStringExtra("NOTA") ?: ""
        val asignatura = intent.getStringExtra("ASIGNATURA") ?: ""
        val timestamp = intent.getLongExtra("TIMESTAMP", 0L)
        val registroId = intent.getIntExtra("REGISTRO_ID", -1)
        val signatureSize = intent.getIntExtra("SIGNATURE_SIZE", 0)

        val dateFormat = SimpleDateFormat("dd/MM/yyyy HH:mm:ss", Locale.getDefault())
        val date = Date(timestamp)

        // Mostrar el mensaje con el ID del registro, el tamaño de la firma y la asignatura
        binding.textViewMensaje.text = "Se registró correctamente en la base de datos, " +
                "se creó el documento .pdf del registro correspondiente (Registro #$registroId). " +
                "Tamaño de la firma: $signatureSize bytes. " +
                "Asignatura: $asignatura"

        binding.buttonVolverMain.setOnClickListener {
            finish()
        }

        binding.buttonIrTres.setOnClickListener {
            startActivity(Intent(this, ActivityTres::class.java))
        }

        // Cargar y mostrar el nombre del docente
        lifecycleScope.launch {
            val docente = withContext(Dispatchers.IO) {
                database.registroDao().getDocente()
            }
            docente?.let {
                binding.textViewDocenteName.text = "Docente: ${it.nombreCompleto}"
            }
        }
    }
}
Archivo: ./app/src/main/java/com/example/sept1ejemplo/ActivityTres.kt
-----------------------------------------------------
package com.example.sept1ejemplo

import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.lifecycleScope
import com.example.sept1ejemplo.database.AppDatabase
import com.example.sept1ejemplo.databinding.ActivityTresBinding
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.text.SimpleDateFormat
import java.util.*

class ActivityTres : AppCompatActivity() {

    private lateinit var binding: ActivityTresBinding
    private lateinit var database: AppDatabase

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityTresBinding.inflate(layoutInflater)
        setContentView(binding.root)

        database = AppDatabase.getDatabase(this)

        binding.buttonVolverMain.setOnClickListener {
            finish()
        }

        binding.buttonCerrar.setOnClickListener {
            finishAffinity()
        }

        // Cargar y mostrar los registros con sus índices
        cargarRegistros()

        // Cargar y mostrar el nombre del docente
        lifecycleScope.launch {
            val docente = withContext(Dispatchers.IO) {
                database.registroDao().getDocente()
            }
            docente?.let {
                binding.textViewDocenteName.text = "Docente: ${it.nombreCompleto}"
            }
        }
    }

    private fun cargarRegistros() {
        lifecycleScope.launch {
            val registros = withContext(Dispatchers.IO) {
                database.registroDao().getAllRegistros()  // Obtener los registros de la base de datos
            }
            val dateFormat = SimpleDateFormat("dd/MM/yyyy HH:mm:ss", Locale.getDefault())

            // Construir la cadena de texto que muestra cada registro con su ID (índice)
            val registrosText = registros.joinToString("\n\n") { registro ->
                "Registro #${registro.id}\n" +  // Mostrar el ID del registro
                        "Nombres y Apellidos: ${registro.nombresApellidos}\n" +
                        "Asignatura: ${registro.asignatura}\n" +
                        "Nota: ${registro.nota}\n" +
                        "Fecha: ${dateFormat.format(Date(registro.timestamp))}"
            }

            // Mostrar el resultado en el TextView
            binding.textViewRegistros.text = registrosText
        }
    }
}
Archivo: ./app/src/main/java/com/example/sept1ejemplo/FirmaActivity.kt
-----------------------------------------------------
package com.example.sept1ejemplo

import android.content.Intent
import android.graphics.Bitmap
import android.graphics.Color
import android.os.Bundle
import android.util.Base64
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.lifecycleScope
import com.example.sept1ejemplo.database.AppDatabase
import com.example.sept1ejemplo.database.RegistroEntity
import com.example.sept1ejemplo.databinding.ActivityFirmaBinding
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.io.ByteArrayOutputStream
import com.example.sept1ejemplo.util.PdfGenerator

class FirmaActivity : AppCompatActivity() {

    private lateinit var binding: ActivityFirmaBinding
    private lateinit var database: AppDatabase
    private lateinit var signatureBitmap: Bitmap

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityFirmaBinding.inflate(layoutInflater)
        setContentView(binding.root)

        database = AppDatabase.getDatabase(this)

        val nombre = intent.getStringExtra("nombre") ?: ""
        val nota = intent.getStringExtra("nota") ?: ""
        val asignatura = intent.getStringExtra("asignatura") ?: ""

        // Configurar el listener para el SignaturePad
        binding.signaturePad.setOnSignedListener(object : com.github.gcacace.signaturepad.views.SignaturePad.OnSignedListener {
            override fun onSigned() {
                binding.btnAceptar.isEnabled = true
                signatureBitmap = binding.signaturePad.signatureBitmap
            }

            override fun onClear() {
                binding.btnAceptar.isEnabled = false
            }

            override fun onStartSigning() {}
        })

        // Botón Aceptar
        binding.btnAceptar.setOnClickListener {
            if (binding.signaturePad.isEmpty) {
                Toast.makeText(this, "Por favor, firme antes de aceptar", Toast.LENGTH_SHORT).show()
                return@setOnClickListener
            }

            // Redimensionar y recortar la firma
            val resizedSignature = resizeBitmap(signatureBitmap, 600, 300)
            val croppedSignature = cropSignature(resizedSignature)

            // Obtener el nombre del docente desde la base de datos y generar PDF
            obtenerNombreDocente { nombreDocente ->
                if (nombreDocente != null) {
                    saveSignature(croppedSignature, nombreDocente, nombre, nota, asignatura)
                } else {
                    Toast.makeText(this, "Error: Docente no registrado", Toast.LENGTH_SHORT).show()
                }
            }
        }

        // Botón Limpiar
        binding.btnLimpiar.setOnClickListener {
            binding.signaturePad.clear()
        }
    }

    private fun resizeBitmap(original: Bitmap, maxWidth: Int, maxHeight: Int): Bitmap {
        val width = original.width
        val height = original.height
        val aspectRatio = width.toFloat() / height.toFloat()

        var newWidth = maxWidth
        var newHeight = maxHeight

        if (width > height) {
            newHeight = (newWidth / aspectRatio).toInt()
        } else {
            newWidth = (newHeight * aspectRatio).toInt()
        }

        return Bitmap.createScaledBitmap(original, newWidth, newHeight, true)
    }

    private fun cropSignature(signatureBitmap: Bitmap): Bitmap {
        val width = signatureBitmap.width
        val height = signatureBitmap.height
        var minX = width
        var minY = height
        var maxX = -1
        var maxY = -1

        for (x in 0 until width) {
            for (y in 0 until height) {
                val pixel = signatureBitmap.getPixel(x, y)
                if (pixel != Color.WHITE) {
                    if (x < minX) minX = x
                    if (x > maxX) maxX = x
                    if (y < minY) minY = y
                    if (y > maxY) maxY = y
                }
            }
        }

        return if (maxX == -1 || maxY == -1) {
            signatureBitmap
        } else {
            Bitmap.createBitmap(signatureBitmap, minX, minY, maxX - minX + 1, maxY - minY + 1)
        }
    }

    private fun obtenerNombreDocente(callback: (String?) -> Unit) {
        lifecycleScope.launch(Dispatchers.IO) {
            val docente = database.registroDao().getDocente()
            withContext(Dispatchers.Main) {
                if (docente != null) {
                    callback(docente.nombreCompleto)
                } else {
                    callback(null)
                }
            }
        }
    }

    private fun saveSignature(signatureBitmap: Bitmap, nombreDocente: String, nombre: String, nota: String, asignatura: String) {
        val stream = ByteArrayOutputStream()
        signatureBitmap.compress(Bitmap.CompressFormat.PNG, 100, stream)
        val signatureBytes = stream.toByteArray()
        val signatureBase64 = Base64.encodeToString(signatureBytes, Base64.DEFAULT)

        val timestamp = System.currentTimeMillis()

        val registro = RegistroEntity(
            nombresApellidos = nombre,
            nota = nota,
            asignatura = asignatura,
            timestamp = timestamp,
            firmaBase64 = signatureBase64
        )

        lifecycleScope.launch(Dispatchers.IO) {
            val registroId = database.registroDao().insertRegistro(registro)
            val updatedRegistro = registro.copy(id = registroId.toInt())

            // Generar el PDF pasando el nombre del docente y la asignatura
            val pdfFile = PdfGenerator.generatePdf(this@FirmaActivity, updatedRegistro, signatureBitmap, nombreDocente)

            launch(Dispatchers.Main) {
                val intent = Intent(this@FirmaActivity, ActivityDos::class.java).apply {
                    putExtra("NOMBRES_APELLIDOS", nombre)
                    putExtra("NOTA", nota)
                    putExtra("ASIGNATURA", asignatura)
                    putExtra("TIMESTAMP", timestamp)
                    putExtra("REGISTRO_ID", registroId.toInt())
                    putExtra("SIGNATURE_SIZE", signatureBase64.toByteArray().size)
                }
                startActivity(intent)
                finish()
            }
        }
    }
}
Archivo: ./app/src/main/java/com/example/sept1ejemplo/RegistrosActivity.kt
-----------------------------------------------------

package com.example.sept1ejemplo

import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.example.sept1ejemplo.database.AppDatabase
import com.example.sept1ejemplo.database.RegistroEntity
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext

class RegistrosActivity : AppCompatActivity() {
    private lateinit var recyclerView: RecyclerView
    private lateinit var adapter: RegistrosAdapter

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_registros)

        recyclerView = findViewById(R.id.recyclerViewRegistros)
        recyclerView.layoutManager = LinearLayoutManager(this)
        adapter = RegistrosAdapter(emptyList())
        recyclerView.adapter = adapter

        cargarRegistros()
    }

    private fun cargarRegistros() {
        GlobalScope.launch(Dispatchers.IO) {
            val database = AppDatabase.getDatabase(this@RegistrosActivity)
            val registros = database.registroDao().getAllRegistros()
            withContext(Dispatchers.Main) {
                adapter.actualizarRegistros(registros)
            }
        }
    }
}

class RegistrosAdapter(private var registros: List<RegistroEntity>) : RecyclerView.Adapter<RegistrosAdapter.RegistroViewHolder>() {
    class RegistroViewHolder(view: android.view.View) : RecyclerView.ViewHolder(view) {
        // TODO: Definir los elementos de la vista para cada item
    }

    override fun onCreateViewHolder(parent: android.view.ViewGroup, viewType: Int): RegistroViewHolder {
        val view = android.view.LayoutInflater.from(parent.context).inflate(R.layout.item_registro, parent, false)
        return RegistroViewHolder(view)
    }

    override fun onBindViewHolder(holder: RegistroViewHolder, position: Int) {
        val registro = registros[position]
        // TODO: Configurar los elementos de la vista con los datos del registro
    }

    override fun getItemCount() = registros.size

    fun actualizarRegistros(nuevosRegistros: List<RegistroEntity>) {
        registros = nuevosRegistros
        notifyDataSetChanged()
    }
}


Archivo: ./app/src/main/java/com/example/sept1ejemplo/RegistroDocente.kt
-----------------------------------------------------
package com.example.sept1ejemplo

import android.content.Intent
import android.os.Bundle
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.lifecycleScope
import com.example.sept1ejemplo.database.AppDatabase
import com.example.sept1ejemplo.database.AsignaturaEntity
import com.example.sept1ejemplo.database.DocenteEntity
import com.example.sept1ejemplo.databinding.ActivityRegistroDocenteBinding
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext

class RegistroDocente : AppCompatActivity() {

    private lateinit var binding: ActivityRegistroDocenteBinding
    private lateinit var database: AppDatabase

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityRegistroDocenteBinding.inflate(layoutInflater)
        setContentView(binding.root)

        database = AppDatabase.getDatabase(this)

        binding.btnRegistrar.setOnClickListener {
            val nombreCompleto = binding.etNombreCompleto.text.toString()
            val asignaturas = binding.etAsignaturas.text.toString().split(",").map { it.trim() }

            if (nombreCompleto.isNotEmpty() && asignaturas.isNotEmpty()) {
                registrarDocente(nombreCompleto, asignaturas)
            } else {
                Toast.makeText(this, "Por favor, complete todos los campos", Toast.LENGTH_SHORT).show()
            }
        }
    }

    private fun registrarDocente(nombreCompleto: String, asignaturas: List<String>) {
        lifecycleScope.launch {
            try {
                withContext(Dispatchers.IO) {
                    val docenteId = database.registroDao().insertDocente(DocenteEntity(nombreCompleto = nombreCompleto))

                    asignaturas.forEach { asignatura ->
                        database.registroDao().insertAsignatura(AsignaturaEntity(nombre = asignatura, docenteId = docenteId.toInt()))
                    }
                }

                Toast.makeText(this@RegistroDocente, "Docente y asignaturas registrados con éxito", Toast.LENGTH_SHORT).show()
                val intent = Intent(this@RegistroDocente, MainActivity::class.java)
                startActivity(intent)
                finish()
            } catch (e: Exception) {
                withContext(Dispatchers.Main) {
                    Toast.makeText(this@RegistroDocente, "Error al registrar: ${e.message}", Toast.LENGTH_LONG).show()
                }
            }
        }
    }
}
Archivo: ./app/src/main/java/com/example/sept1ejemplo/database/AppDatabase.kt
-----------------------------------------------------
package com.example.sept1ejemplo.database

import android.content.Context
import androidx.room.Database
import androidx.room.Room
import androidx.room.RoomDatabase

@Database(entities = [RegistroEntity::class, DocenteEntity::class, AsignaturaEntity::class], version = 5, exportSchema = false)
abstract class AppDatabase : RoomDatabase() {
    abstract fun registroDao(): RegistroDao

    companion object {
        @Volatile
        private var INSTANCE: AppDatabase? = null

        fun getDatabase(context: Context): AppDatabase {
            return INSTANCE ?: synchronized(this) {
                val instance = Room.databaseBuilder(
                    context.applicationContext,
                    AppDatabase::class.java,
                    "app_database"
                )
                    .fallbackToDestructiveMigration()
                    .build()
                INSTANCE = instance
                instance
            }
        }
    }
}
Archivo: ./app/src/main/java/com/example/sept1ejemplo/database/RegistroDao.kt
-----------------------------------------------------
package com.example.sept1ejemplo.database

import androidx.room.*

@Dao
interface RegistroDao {
    // Existing queries...

    @Query("SELECT * FROM registros ORDER BY timestamp DESC")
    suspend fun getAllRegistros(): List<RegistroEntity>

    @Insert
    suspend fun insertRegistro(registro: RegistroEntity): Long

    // Docente related queries
    @Query("SELECT * FROM docente LIMIT 1")
    suspend fun getDocente(): DocenteEntity?

    @Insert
    suspend fun insertDocente(docente: DocenteEntity): Long

    // Asignatura related queries
    @Insert
    suspend fun insertAsignatura(asignatura: AsignaturaEntity): Long

    @Query("SELECT * FROM asignaturas WHERE docenteId = :docenteId")
    suspend fun getAsignaturasForDocente(docenteId: Int): List<AsignaturaEntity>

    @Transaction
    @Query("SELECT * FROM docente")
    suspend fun getDocenteWithAsignaturas(): List<DocenteWithAsignaturas>
}
Archivo: ./app/src/main/java/com/example/sept1ejemplo/database/RegistroEntity.kt
-----------------------------------------------------
package com.example.sept1ejemplo.database

import androidx.room.Entity
import androidx.room.PrimaryKey

@Entity(tableName = "registros")
data class RegistroEntity(
    @PrimaryKey(autoGenerate = true) val id: Int = 0,
    val nombresApellidos: String,
    val nota: String,
    val asignatura: String,  // Nuevo campo
    val timestamp: Long,
    val firmaBase64: String? = null,
)
Archivo: ./app/src/main/java/com/example/sept1ejemplo/database/AsignaturaEntity.kt
-----------------------------------------------------
package com.example.sept1ejemplo.database

import androidx.room.Entity
import androidx.room.PrimaryKey
import androidx.room.ForeignKey

@Entity(
    tableName = "asignaturas",
    foreignKeys = [ForeignKey(
        entity = DocenteEntity::class,
        parentColumns = ["id"],
        childColumns = ["docenteId"],
        onDelete = ForeignKey.CASCADE
    )]
)
data class AsignaturaEntity(
    @PrimaryKey(autoGenerate = true) val id: Int = 0,
    val nombre: String,
    val docenteId: Int
)

Archivo: ./app/src/main/java/com/example/sept1ejemplo/database/DocenteEntity.kt
-----------------------------------------------------
package com.example.sept1ejemplo.database

import androidx.room.Entity
import androidx.room.PrimaryKey

@Entity(tableName = "docente")
data class DocenteEntity(
    @PrimaryKey(autoGenerate = true) val id: Int = 0,
    val nombreCompleto: String
)
Archivo: ./app/src/main/java/com/example/sept1ejemplo/database/DocenteWithAsignaturas.kt
-----------------------------------------------------
package com.example.sept1ejemplo.database

import androidx.room.Embedded
import androidx.room.Relation

data class DocenteWithAsignaturas(
    @Embedded val docente: DocenteEntity,
    @Relation(
        parentColumn = "id",
        entityColumn = "docenteId"
    )
    val asignaturas: List<AsignaturaEntity>
)

Archivo: ./app/src/main/java/com/example/sept1ejemplo/util/PdfGenerator.kt
-----------------------------------------------------
package com.example.sept1ejemplo.util

import android.content.Context
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.os.Environment
import com.example.sept1ejemplo.database.RegistroEntity
import com.itextpdf.kernel.pdf.PdfDocument
import com.itextpdf.kernel.pdf.PdfWriter
import com.itextpdf.layout.Document
import com.itextpdf.layout.element.Image
import com.itextpdf.layout.element.Paragraph
import com.itextpdf.io.image.ImageDataFactory
import java.io.ByteArrayOutputStream
import java.io.File
import java.text.SimpleDateFormat
import java.util.*

object PdfGenerator {

    fun generatePdfFileName(registro: RegistroEntity): String {
        val words = registro.nombresApellidos.split(" ")
        val abbreviation = words.joinToString("_") { word ->
            word.take(3).capitalize(Locale.getDefault())
        }
        val dateFormat = SimpleDateFormat("dd-MMM-HH-mm", Locale.getDefault())
        val formattedTimestamp = dateFormat.format(Date(registro.timestamp))
        return "Reg${registro.id}_${abbreviation}_$formattedTimestamp.pdf"
    }

    fun generatePdf(context: Context, registro: RegistroEntity, signatureBitmap: Bitmap, nombreDocente: String): File {
        val fileName = generatePdfFileName(registro)
        val downloadsDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS)
        val file = File(downloadsDir, fileName)

        PdfWriter(file).use { writer ->
            PdfDocument(writer).use { pdf ->
                Document(pdf).use { document ->

                    // Añadir membrete
                    val membreteBitmap = BitmapFactory.decodeResource(
                        context.resources,
                        context.resources.getIdentifier("membrete_optimizado", "drawable", context.packageName)
                    )
                    val streamMembrete = ByteArrayOutputStream()
                    membreteBitmap.compress(Bitmap.CompressFormat.JPEG, 85, streamMembrete)
                    val membreteBytes = streamMembrete.toByteArray()
                    val membreteImage = Image(ImageDataFactory.create(membreteBytes))
                    membreteImage.scaleToFit(500f, 150f)
                    document.add(membreteImage)

                    // Añadir datos al PDF
                    document.add(Paragraph("Registro #${registro.id}"))
                    document.add(Paragraph("Docente: $nombreDocente"))
                    document.add(Paragraph("Asignatura: ${registro.asignatura}"))

                    document.add(Paragraph("Nota: ${registro.nota}"))

                    // Convertir la firma a imagen y agregarla al PDF
                    val streamFirma = ByteArrayOutputStream()
                    signatureBitmap.compress(Bitmap.CompressFormat.JPEG, 85, streamFirma)
                    val signatureBytes = streamFirma.toByteArray()
                    val signatureImage = Image(ImageDataFactory.create(signatureBytes))
                    signatureImage.scaleToFit(100f, 100f)
                    document.add(signatureImage)
                    document.add(Paragraph("Estudiante: ${registro.nombresApellidos}"))
                    // Añadir fecha y hora
                    val dateFormat = SimpleDateFormat("dd/MM/yyyy HH:mm:ss", Locale.getDefault())
                    val date = Date(registro.timestamp)
                    document.add(Paragraph("Fecha y Hora: ${dateFormat.format(date)}"))
                }
            }
        }
        return file
    }
}
Archivo: ./app/src/main/res/layout/activity_main.xml
-----------------------------------------------------
<?xml version="1.0" encoding="utf-8"?>
<androidx.coordinatorlayout.widget.CoordinatorLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <com.google.android.material.appbar.AppBarLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content">

        <com.google.android.material.appbar.MaterialToolbar
            android:id="@+id/toolbar"
            android:layout_width="match_parent"
            android:layout_height="?attr/actionBarSize"
            android:background="?attr/colorPrimary"
            app:titleTextColor="@android:color/white" />

    </com.google.android.material.appbar.AppBarLayout>

    <androidx.core.widget.NestedScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        app:layout_behavior="@string/appbar_scrolling_view_behavior">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical"
            android:padding="16dp">

            <TextView
                android:id="@+id/textViewDocenteName"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:textSize="18sp"
                android:textStyle="bold"
                android:gravity="center"
                android:layout_marginBottom="16dp"/>

            <!-- Resto del contenido sin cambios -->

        </LinearLayout>

    </androidx.core.widget.NestedScrollView>

</androidx.coordinatorlayout.widget.CoordinatorLayout>
Archivo: ./app/src/main/res/layout/activity_dos.xml
-----------------------------------------------------
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".ActivityDos">

    <TextView
        android:id="@+id/textViewDocenteName"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:textSize="18sp"
        android:textStyle="bold"
        android:gravity="center"
        android:layout_margin="16dp"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>

    <TextView
        android:id="@+id/textViewMensaje"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text="Se registró correctamente en la base de datos, y se creó el documento .pdf del registro correspondiente."
        app:layout_constraintTop_toBottomOf="@id/textViewDocenteName"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_margin="16dp"
        android:textAlignment="center"/>

    <Button
        android:id="@+id/buttonVolverMain"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Inicio"
        app:layout_constraintTop_toBottomOf="@id/textViewMensaje"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_marginTop="16dp"/>

    <Button
        android:id="@+id/buttonIrTres"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Registros"
        app:layout_constraintTop_toBottomOf="@id/buttonVolverMain"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_marginTop="16dp"/>

</androidx.constraintlayout.widget.ConstraintLayout>
Archivo: ./app/src/main/res/layout/activity_tres.xml
-----------------------------------------------------
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".ActivityTres">

    <TextView
        android:id="@+id/textViewDocenteName"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:textSize="18sp"
        android:textStyle="bold"
        android:gravity="center"
        android:layout_margin="16dp"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>

    <ScrollView
        android:layout_width="0dp"
        android:layout_height="0dp"
        app:layout_constraintTop_toBottomOf="@id/textViewDocenteName"
        app:layout_constraintBottom_toTopOf="@id/buttonVolverMain"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_margin="16dp">

        <TextView
            android:id="@+id/textViewRegistros"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="Aquí se mostrarán los registros"
            android:textSize="16sp"
            android:padding="16dp"/>
    </ScrollView>

    <Button
        android:id="@+id/buttonVolverMain"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Inicio"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toStartOf="@id/buttonCerrar"
        android:layout_margin="16dp"/>

    <Button
        android:id="@+id/buttonCerrar"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Cerrar App"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toEndOf="@id/buttonVolverMain"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_margin="16dp"/>

</androidx.constraintlayout.widget.ConstraintLayout>
Archivo: ./app/src/main/res/layout/activity_firma.xml
-----------------------------------------------------
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <com.github.gcacace.signaturepad.views.SignaturePad
        android:id="@+id/signaturePad"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_weight="1"
        android:background="@android:color/white" />

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:layout_marginTop="16dp">

        <Button
            android:id="@+id/btnLimpiar"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="Limpiar" />

        <Button
            android:id="@+id/btnAceptar"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="Aceptar"
            android:enabled="false" /> <!-- Deshabilitado inicialmente -->

    </LinearLayout>

</LinearLayout>

Archivo: ./app/src/main/res/layout/item_registro.xml
-----------------------------------------------------
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:padding="16dp">

    <TextView
        android:id="@+id/textViewRegistro"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text="Registro"
        android:textSize="16sp"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_marginBottom="8dp"/>

    <Button
        android:id="@+id/buttonGenerarPdf"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Generar PDF"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>
</androidx.constraintlayout.widget.ConstraintLayout>

Archivo: ./app/src/main/res/layout/activity_registro_docente.xml
-----------------------------------------------------
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/etNombreCompleto"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Nombre completo del docente"
        android:inputType="textPersonName" />

    <EditText
        android:id="@+id/etAsignaturas"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Asignaturas (separadas por comas)"
        android:inputType="textMultiLine" />

    <Button
        android:id="@+id/btnRegistrar"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Registrar" />

</LinearLayout>
Archivo: ./app/src/main/res/layout/activity_registros.xml
-----------------------------------------------------
<?xml version="1.0" encoding="utf-8"?>
<androidx.recyclerview.widget.RecyclerView
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/recyclerViewRegistros"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:padding="8dp" />

Archivo: ./app/src/main/res/values/strings.xml
-----------------------------------------------------
<resources>
    <string name="app_name">Observador Digital</string>
</resources>
Archivo: ./app/src/main/res/values/colors.xml
-----------------------------------------------------
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="purple_200">#FFBB86FC</color>
    <color name="purple_500">#FF6200EE</color>
    <color name="purple_700">#FF3700B3</color>
    <color name="teal_200">#FF03DAC5</color>
    <color name="teal_700">#FF018786</color>
    <color name="black">#FF000000</color>
    <color name="white">#FFFFFFFF</color>
    <color name="yellow_background">#FFEB3B</color>
</resources>
Archivo: ./app/src/main/res/values/themes.xml
-----------------------------------------------------
<resources xmlns:tools="http://schemas.android.com/tools">
    <!-- Base application theme -->
    <style name="Theme.Sept1ejemplo" parent="Theme.MaterialComponents.DayNight.NoActionBar">
        <!-- Primary brand color -->
        <item name="colorPrimary">@color/purple_500</item>
        <item name="colorPrimaryVariant">@color/purple_700</item>
        <item name="colorOnPrimary">@color/white</item>
        <!-- Secondary brand color -->
        <item name="colorSecondary">@color/teal_200</item>
        <item name="colorSecondaryVariant">@color/teal_700</item>
        <item name="colorOnSecondary">@color/black</item>
        <!-- Status bar color -->
        <item name="android:statusBarColor">?attr/colorPrimaryVariant</item>
    </style>
</resources>
